import { BPMDetector, PeakDetector } from "../src/main/wallpaper_engine";
import { describe, expect, test } from "@jest/globals";

describe("PeakDetector", () => {
    test("Max value search", () => {
        const detector = new PeakDetector();
        const arrMaxIndices = detector.find_max_indices([1, 2, 3, 4, 5]);
        expect(arrMaxIndices).toStrictEqual([{ index: 4, value: 5 }]);
    });

    test("Max value search with threshold 2", () => {
        const detector = new PeakDetector();
        const arrMaxIndices = detector.find_max_indices([1, 2, 3, 4, 5], 1.5);
        expect(arrMaxIndices).toStrictEqual([
            { index: 3, value: 4 },
            { index: 4, value: 5 },
        ]);
    });

    test("RMS calculation", () => {
        const detector = new PeakDetector();
        const rms_value = detector.calculate_RootMeanSquare([0.4, 0.4, 0.4, 0.4]);
        expect(rms_value).toBeCloseTo(Math.sqrt(0.64 / 5));
    });

    test("Peak detection", () => {
        const detector = new PeakDetector(0.2);
        const peak: { is_peak: boolean; value: number } = detector.detect_large_energy_changes(
            [0.4, 0.4, 0.4, 0.4],
            0.8
        );
        expect(peak.is_peak).toBe(false);
    });

    test("Peak detection 2", () => {
        const detector = new PeakDetector(0.1);
        const peak: { is_peak: boolean; value: number } = detector.detect_large_energy_changes(
            [0.4, 0.4, 0.4, 0.4],
            0.1
        );
        expect(peak.is_peak).toBe(true);
    });

    test("Peak detection every fourth", () => {
        const peak_detector = new PeakDetector();
        const input_data = Array(100)
            .fill(false)
            .map((v) => Array(5).fill(0.2));
        const every_fourth_beat = input_data.map((val, i, arr) => {
            if (i % 4 == 0) {
                return val.map((v) => v * 5);
            }
            return val;
        });
        const peaks: { is_peak: boolean; value: number }[] = every_fourth_beat.map(
            (values, ind, arr) => {
                return peak_detector.detect_large_energy_changes(values);
            }
        );
        const detected_peaks = peaks.map((val, i, arr) => {
            return val.is_peak;
        });
        const peaks_arr_placeholder = Array(100).fill(false);
        const expected_peaks_arr_every_fourth = peaks_arr_placeholder.map((val, i, arr) => {
            if (i % 4 == 0) {
                return true;
            }
            return false;
        });
        expect(detected_peaks).toStrictEqual(expected_peaks_arr_every_fourth);
    });

    test("Beat calculation", () => {
        const bpm_detector = new BPMDetector(80);
        const bpm_1 = bpm_detector.calculate_bpm(0, [0.5, 0.5, 0.5, 0.5]);
        const bpm_2 = bpm_detector.calculate_bpm(1000, [0.5, 0.5, 0.5, 0.5]);
        const bpm_3 = bpm_detector.calculate_bpm(2000, [1, 1, 1, 1]);
        const bpm_4 = bpm_detector.calculate_bpm(3000, [0.5, 0.5, 0.5, 0.5]);
        const bpm_5 = bpm_detector.calculate_bpm(4000, [0.5, 0.5, 0.5, 0.5]);
        const bpm_6 = bpm_detector.calculate_bpm(5500, [1, 1, 1, 1]);
        expect(bpm_1).toBe(80);
        expect(bpm_2).toBe(80);
        expect(bpm_3).toBe(80);
        expect(bpm_4).toBe(80);
        expect(bpm_5).toBe(80);
        expect(bpm_6).toBeCloseTo(17.14);
    });

    test("Beat calculation No Change with single beat", () => {
        const bpm_detector = new BPMDetector(80);
        const bpm_1 = bpm_detector.calculate_bpm(0, [0.5, 0.5, 0.5, 0.5]);
        const bpm_2 = bpm_detector.calculate_bpm(1000, [0.5, 0.5, 0.5, 0.5]);
        const bpm_3 = bpm_detector.calculate_bpm(1500, [0.3, 0.3, 0.3, 0.3]);
        const bpm_4 = bpm_detector.calculate_bpm(2000, [1, 1, 1, 1]);
        expect(bpm_1).toBe(80);
        expect(bpm_2).toBe(80);
        expect(bpm_3).toBe(80);
        expect(bpm_4).toBe(80);
    });

    test("Beat calculation Every Fourth Beat BPM", () => {
        const bpm_detector = new BPMDetector(80);
        const input_data = Array(100)
            .fill(false)
            .map((v) => Array(5).fill(0.2));
        const every_fourth_beat = input_data.map((val, i, arr) => {
            if (i % 4 == 0) {
                return val.map((v) => v * 5);
            }
            return val;
        });
        const bpms: number[] = every_fourth_beat.map((values, ind, arr) => {
            return bpm_detector.calculate_bpm(ind * 1000, values);
        });
        const new_beats = Array(92).fill(15);
        const expected_beats = Array(8).fill(80);
        expected_beats.push(...new_beats);
        expect(bpms).toStrictEqual(expected_beats);
    });

    test("Beat calculation with changing music", () => {
        const bpm_detector = new BPMDetector(80);
        const input_data = Array(100)
            .fill(false)
            .map((v) => Array(5).fill(0.2));
        const every_fourth_beat = input_data.map((val, i, arr) => {
            if (i % 4 == 0) {
                return val.map((v) => v * 5);
            }
            return val;
        });
        const bpms: number[] = every_fourth_beat.map((values, ind, arr) => {
            return bpm_detector.calculate_bpm(ind * 1000, values);
        });
        const every_second_beat = input_data.map((val, i, arr) => {
            if (i % 2 == 0) {
                return val.map((v) => v * 5);
            }
            return val;
        });
        const bpms_2: number[] = every_second_beat.map((values, ind, arr) => {
            return bpm_detector.calculate_bpm((ind + 100) * 1000, values);
        });
        const expected_beats_part_1 = [15, 15, 30, 30];
        const expected_beats_part_2 = Array(96).fill(30);
        expected_beats_part_1.push(...expected_beats_part_2);
        console.log("test slice" + [15, 15, 30, 30].slice(0, 3));
        expect(bpms_2).toStrictEqual(expected_beats_part_1);
    });

    test("Test not existing index", () => {
        let x = [1];
        expect(x[2]).toBe(undefined);
    });

    test("BPM changes at random peaks", () => {
        const bpm_detector = new BPMDetector(80);
        const peak_changed_indices = new Set(
            Array(20)
                .fill(false)
                .map((v) => Math.round(Math.random() * 99))
                .sort((a, b) => a - b)
        );
        const input_data = Array(100)
            .fill(false)
            .map((v) => Array(5).fill(0.2));
        const every_xth_beat = input_data.map((music_input, i, arr) => {
            if (peak_changed_indices.has(i)) {
                return music_input.map((v) => v * 5);
            }
            return music_input;
        });
        const bpms: number[] = every_xth_beat.map((values, ind, arr) => {
            return bpm_detector.calculate_bpm(ind * 1000, values);
        });
        console.log("changed indices %o", peak_changed_indices);
        console.log("bpm %o", bpms);
        let is_n_first_beat = 2;
        let previous_checked_indices: number[] = [];
        for (const [index, bpm] of bpms.entries()) {
            // TODO fix changes directly after another are not recognized due to not peaking
            // TODO simplify this test somehow
            if (peak_changed_indices.has(index) && !peak_changed_indices.has(index - 1)) {
                if (is_n_first_beat > 0) {
                    is_n_first_beat -= 1;
                    previous_checked_indices.push(index);
                    continue;
                }
                console.log("Checking at index" + index + " with bpm " + bpm);
                const previous_index =
                    previous_checked_indices[previous_checked_indices.length - 1];
                const previous__previous_index =
                    previous_checked_indices[previous_checked_indices.length - 2];
                const is_same_bpm_dif =
                    previous_index != undefined &&
                    previous__previous_index != undefined &&
                    index - previous_index == previous_index - previous__previous_index;
                console.log("the bpms %o", bpms);
                expect(bpm == bpms[index - 1] && !is_same_bpm_dif).toBeFalsy();
                previous_checked_indices.push(index);
            }
        }
    });

    test("With real music", () => {
        const arr1 = [
            0.048133041709661484, 0.46945223212242126, 0.33809205889701843, 0.27719083428382874,
            0.13525356352329254, 0.19167369604110718, 0.03834899142384529, 0.07020963728427887,
            0.06013974919915199, 0.103165403008461, 0.11663071811199188, 0.024621132761240005,
            0.023805757984519005, 0.03275706619024277, 0.04816172644495964, 0.04619452729821205,
            0.038676753640174866, 0.03915262967348099, 0.025271132588386536, 0.037240251898765564,
            0.07990877330303192, 0.14446963369846344, 0.023142393678426743, 0.10675348341464996,
            0.023137347772717476, 0.013284114189445972, 0.0712033361196518, 0.02222561091184616,
            0.05149791017174721, 0.03816783428192139, 0.08461298048496246, 0.09195971488952637,
            0.4465797543525696, 0.14376962184906006, 0.06978888809680939, 0.060160648077726364,
            0.06554727256298065, 0.04175674542784691, 0.08628753572702408, 0.08601861447095871,
            0.11640792340040207, 0.09605075418949127, 0.11257513612508774, 0.12279064953327179,
            0.0838523730635643, 0.10540606826543808, 0.11221568286418915, 0.12069962918758392,
            0.16251617670059204, 0.15365390479564667, 0.10168877243995667, 0.1337277889251709,
            0.19738566875457764, 0.15490762889385223, 0.15825016796588898, 0.31210458278656006,
            0.15715421736240387, 0.23851117491722107, 0.16410373151302338, 0.10901958495378494,
            0.08789733797311783, 0.0820254385471344, 0.14109806716442108, 0.05291371792554855,
            0.05097242817282677, 0.47892773151397705, 0.28195419907569885, 0.3204319179058075,
            0.05166119709610939, 0.21515503525733948, 0.09114503115415573, 0.08956785500049591,
            0.09237752854824066, 0.12416158616542816, 0.14269064366817474, 0.04939286783337593,
            0.033190205693244934, 0.03302716836333275, 0.05303371697664261, 0.049014437943696976,
            0.026208791881799698, 0.06962785869836807, 0.07499347627162933, 0.07816802710294724,
            0.18261905014514923, 0.11186595261096954, 0.07749142497777939, 0.027363771572709084,
            0.027256619185209274, 0.032147686928510666, 0.05570300295948982, 0.008791251108050346,
            0.05131278187036514, 0.03622102737426758, 0.10000048577785492, 0.041368916630744934,
            0.17763622105121613, 0.11226432025432587, 0.06633424758911133, 0.07119856029748917,
        ];
        const arr2 = [
            0.15114140510559082, 0.3621605932712555, 0.22782614827156067, 0.14585615694522858,
            0.061711590737104416, 0.07888095825910568, 0.06371964514255524, 0.04859698936343193,
            0.06661805510520935, 0.029553577303886414, 0.10942807048559189, 0.05145823210477829,
            0.0017182857263833284, 0.008903185836970806, 0.03856092318892479, 0.06734561920166016,
            0.058318156749010086, 0.02314145676791668, 0.02358706295490265, 0.09359543770551682,
            0.16133399307727814, 0.053637485951185226, 0.06638486683368683, 0.045021284371614456,
            0.043612346053123474, 0.007641550153493881, 0.0284325759857893, 0.049220189452171326,
            0.023695018142461777, 0.03585795313119888, 0.05584757775068283, 0.06268846243619919,
            0.20854483544826508, 0.1295471340417862, 0.04925927519798279, 0.0704474076628685,
            0.04322092980146408, 0.02950902096927166, 0.08633881062269211, 0.050922296941280365,
            0.08099593222141266, 0.11675316095352173, 0.18182553350925446, 0.13418930768966675,
            0.136053666472435, 0.13554435968399048, 0.06722725927829742, 0.07384072244167328,
            0.0693168044090271, 0.0815856009721756, 0.07737710326910019, 0.13862574100494385,
            0.1290319710969925, 0.1145799532532692, 0.14784188568592072, 0.18924544751644135,
            0.17465439438819885, 0.5631111860275269, 0.12232989817857742, 0.13233651220798492,
            0.057129424065351486, 0.06273887306451797, 0.1931319534778595, 0.051636792719364166,
            0.1637895703315735, 0.3279249966144562, 0.19585950672626495, 0.15549030900001526,
            0.06331724673509598, 0.15557998418807983, 0.1285351663827896, 0.07959253340959549,
            0.08221469819545746, 0.09376981109380722, 0.1840849667787552, 0.04335908964276314,
            0.05463046208024025, 0.012211903929710388, 0.024039486423134804, 0.012736737728118896,
            0.0449124276638031, 0.02202574722468853, 0.01843523420393467, 0.04998204857110977,
            0.1039191409945488, 0.10418701171875, 0.006353084463626146, 0.05200546979904175,
            0.01082309614866972, 0.013793793506920338, 0.04647147282958031, 0.02989926189184189,
            0.003729629097506404, 0.04718026891350746, 0.15703371167182922, 0.04853961989283562,
            0.09205710142850876, 0.10981842130422592, 0.052962396293878555, 0.07308733463287354,
        ];
        const arr3 = [
            0.20400311052799225, 0.31738415360450745, 0.14522022008895874, 0.1965126395225525,
            0.12779484689235687, 0.0863560140132904, 0.09029994159936905, 0.049933504313230515,
            0.038356002420186996, 0.03859119117259979, 0.21036797761917114, 0.16723193228244781,
            0.017592573538422585, 0.01771426573395729, 0.05536941438913345, 0.04191374033689499,
            0.03738096356391907, 0.024597711861133575, 0.03820260241627693, 0.0481644868850708,
            0.08637706935405731, 0.08342953026294708, 0.05820660665631294, 0.0409785658121109,
            0.023316869512200356, 0.0738297700881958, 0.024108203127980232, 0.013899710029363632,
            0.032043855637311935, 0.04811210557818413, 0.06325648725032806, 0.0247671976685524,
            0.11340216547250748, 0.049556415528059006, 0.03534293919801712, 0.05549326539039612,
            0.12080777436494827, 0.06572709232568741, 0.04973367601633072, 0.042933568358421326,
            0.05132409930229187, 0.15035243332386017, 0.10119299590587616, 0.1792774647474289,
            0.13306257128715515, 0.11734501272439957, 0.07489721477031708, 0.10448028892278671,
            0.05115695670247078, 0.10100506991147995, 0.1416231095790863, 0.09107900410890579,
            0.10723759233951569, 0.14101576805114746, 0.08958722651004791, 0.3841882050037384,
            0.1940072774887085, 0.21853379905223846, 0.14735496044158936, 0.10257933288812637,
            0.05963438004255295, 0.07466167956590652, 0.21818244457244873, 0.04854735732078552,
            0.1831989735364914, 0.31795257329940796, 0.15705172717571259, 0.14090989530086517,
            0.15906715393066406, 0.020050618797540665, 0.09325747936964035, 0.016992127522826195,
            0.01822223700582981, 0.03932421654462814, 0.08348939567804337, 0.10890286415815353,
            0.038614217191934586, 0.010795065201818943, 0.04198282212018967, 0.030691463500261307,
            0.025997474789619446, 0.02873002178966999, 0.03991146758198738, 0.046603456139564514,
            0.15638379752635956, 0.1266440600156784, 0.024027934297919273, 0.005410699639469385,
            0.032426513731479645, 0.020746534690260887, 0.021614963188767433, 0.013691114261746407,
            0.0036446654703468084, 0.027057284489274025, 0.10037986934185028, 0.025188952684402466,
            0.0759539008140564, 0.08723881840705872, 0.058170199394226074, 0.031071260571479797,
        ];
        const arr4 = [
            0.09952481836080551, 0.16155396401882172, 0.10231005400419235, 0.21728233993053436,
            0.17961663007736206, 0.10234413295984268, 0.10291697829961777, 0.0417521633207798,
            0.0715981051325798, 0.13810358941555023, 0.15702687203884125, 0.052268438041210175,
            0.06734323501586914, 0.024509089067578316, 0.06778200715780258, 0.03061394952237606,
            0.013409100472927094, 0.017162436619400978, 0.039676833897829056, 0.03657331317663193,
            0.05815650522708893, 0.02409234084188938, 0.11084402352571487, 0.031302016228437424,
            0.04478598013520241, 0.03976339474320412, 0.01252788957208395, 0.04309398680925369,
            0.03148489445447922, 0.0697956532239914, 0.05705105885863304, 0.07441529631614685,
            0.10868813097476959, 0.13445788621902466, 0.10563129186630249, 0.09610256552696228,
            0.0900648757815361, 0.06742087006568909, 0.07231340557336807, 0.08175066858530045,
            0.19119048118591309, 0.20560848712921143, 0.21211476624011993, 0.15682527422904968,
            0.13646432757377625, 0.09413917362689972, 0.09918763488531113, 0.07231297343969345,
            0.13245540857315063, 0.08759195357561111, 0.11275281012058258, 0.08721524477005005,
            0.12443482130765915, 0.21247060596942902, 0.1230405941605568, 0.34858018159866333,
            0.158965602517128, 0.2506081461906433, 0.11236272752285004, 0.08567090332508087,
            0.12010056525468826, 0.09723040461540222, 0.06755352765321732, 0.048911284655332565,
            0.09614012390375137, 0.1486484855413437, 0.09918016195297241, 0.22471217811107635,
            0.2133142054080963, 0.04972082003951073, 0.028190119192004204, 0.062100447714328766,
            0.011003999039530754, 0.0832841768860817, 0.08454271405935287, 0.036051396280527115,
            0.04597264900803566, 0.01701708324253559, 0.04151444137096405, 0.024977659806609154,
            0.022776318714022636, 0.027806583791971207, 0.01354571059346199, 0.024954412132501602,
            0.14780370891094208, 0.14763639867305756, 0.034525416791439056, 0.037943024188280106,
            0.03558289632201195, 0.02094968408346176, 0.024303877726197243, 0.03369008004665375,
            0.04917237162590027, 0.04616667702794075, 0.10531031340360641, 0.08288489282131195,
            0.06398656964302063, 0.30106455087661743, 0.24715416133403778, 0.14678621292114258,
        ];
        const bpm_detector = new BPMDetector(80, 0.1);
        let start_date_time = Date.now();
        const bpm1 = bpm_detector.calculate_bpm(start_date_time + 0, arr1);
        const bpm2 = bpm_detector.calculate_bpm(start_date_time + 1000, arr2);
        const bpm3 = bpm_detector.calculate_bpm(start_date_time + 2000, arr3);
        const bpm4 = bpm_detector.calculate_bpm(start_date_time + 4000, arr4);
        expect(bpm4).toBe(80);
    });

    test("Sum Calculation", () => {
        const sum = [0.1, 0.2, 0.3, 0.4].reduce(
            (pre, cur_val, ind, arr) => pre + Math.min(cur_val, 1.0)
        );
        expect(sum).toBeCloseTo(1);
    });

    test("Sum Calculation 2", () => {
        const sum = [
            0.024918261915445328, 0.062388040125370026, 0.025805238634347916, 0.028876736760139465,
            0.012439168989658356, 0.014136815443634987, 0.0056881713680922985, 0.01138262078166008,
            0.007187058683484793, 0.007940572686493397, 0.026147667318582535, 0.019984012469649315,
            0.008329852484166622, 0.0022949224803596735, 0.014454408548772335, 0.00895402580499649,
            0.008370349183678627, 0.008881396614015102, 0.0033742201048880816, 0.011640369892120361,
            0.007524023298174143, 0.015757795423269272, 0.004304007161408663, 0.018123608082532883,
            0.008180350996553898, 0.0022049075923860073, 0.010397170670330524, 0.010322260670363903,
            0.009140567854046822, 0.018629275262355804, 0.028023146092891693, 0.04116199165582657,
            0.0338854044675827, 0.0697704404592514, 0.010227462276816368, 0.022428829222917557,
            0.011535681784152985, 0.03784333914518356, 0.010407433845102787, 0.022229710593819618,
            0.028746256604790688, 0.024294544011354446, 0.032078128308057785, 0.019073858857154846,
            0.03950008377432823, 0.04911143705248833, 0.018533723428845406, 0.02516743913292885,
            0.02559400349855423, 0.013879802078008652,
        ].reduce((pre, cur_val, ind, arr) => pre + Math.min(cur_val, 1.0));
        expect(sum).toBeCloseTo(0.98);
    });
});
