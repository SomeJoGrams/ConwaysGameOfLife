(()=>{"use strict";var e={923:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ConwayHTMLDisplayer=t.DEFAULTGAMERULE=t.ConwayGameFactory=t.ConwayGame=t.ConwayCell=void 0;var n=function(){function e(e){void 0===e&&(e=!1),this.alive=e}return Object.defineProperty(e.prototype,"is_alive",{get:function(){return this.alive},enumerable:!1,configurable:!0}),e}();t.ConwayCell=n;var r=function(){function e(e,t){this.xPos=e,this.yPos=t}return Object.defineProperty(e.prototype,"xPosition",{get:function(){return this.xPos},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"yPosition",{get:function(){return this.yPos},enumerable:!1,configurable:!0}),e}(),i=function(){function e(e,t,n,r){void 0===n&&(n=[2,3]),void 0===r&&(r=[3]),this.result_state=e,this.viewed_cell_positions=t,this.alive_goes_to_result_state_with_neighbours=n,this.dead_goes_to_result_state_with_neighbours=r}return e.prototype.applyRuleToGame=function(e,t,r,i){var o=r.cell_living_neighbours(e,t,this.viewed_cell_positions,r.gameField),a=r.gameField[e][t],s=this.alive_goes_to_result_state_with_neighbours.some((function(e){return o==e})),l=this.dead_goes_to_result_state_with_neighbours.some((function(e){return o==e}));return(a.is_alive&&s||!a.is_alive&&l)&&(i.gameField[e][t]=new n(this.result_state)),i},e}(),o=function(){function e(e,t,n,r,i){void 0===i&&(i="cutoff"),this.xSize=e,this.ySize=t,this.borderRules=i,this.gameField=null==n?this.create_empty_conways_cell_array():n,this.rules=r}return e.prototype.setCell=function(e,t,n){this.gameField[t][e]=n},e.prototype.create_empty_conways_cell_array=function(){var e=this;return new Array(this.ySize).fill(!1).map((function(){return new Array(e.xSize).fill(new n(!1))}))},e.prototype.next_conway_state=function(){for(var t=this,n=this.create_empty_conways_cell_array(),r=new e(this.xSize,this.ySize,n,this.rules),i=function(e){for(var n=function(n){o.rules.forEach((function(i){i.applyRuleToGame(e,n,t,r)}))},i=0;i<o.ySize;i++)n(i)},o=this,a=0;a<this.xSize;a++)i(a);return r},e.prototype.cell_living_neighbours=function(e,t,n,r){var i=this,o=0;return n.forEach((function(n,a,s){var l=n.xPosition,u=n.yPosition,c=e+l,h=t+u;i.in_field(c,h)&&r[c][h].is_alive&&(o+=1)})),o},e.prototype.in_field=function(e,t){return e>0&&t>0&&e<this.xSize&&t<this.ySize},e}();t.ConwayGame=o;var a=function(){function e(e,t,n){this.xSize=e,this.ySize=t,this.rules=n}return e.prototype.centeredfPentomino=function(){if(this.xSize<3&&this.ySize<3)return console.error("Cannot create a Pentomino in a field smaller than 3 times 3"),null;var e=this.get_center(),t=new o(this.xSize,this.ySize,null,this.rules,"cutoff");return t.gameField[e.xPos][e.yPos]=new n(!0),t.gameField[e.xPos][e.yPos+1]=new n(!0),t.gameField[e.xPos][e.yPos-1]=new n(!0),t.gameField[e.xPos-1][e.yPos]=new n(!0),t.gameField[e.xPos+1][e.yPos+1]=new n(!0),t},e.prototype.circle=function(e){for(var t=this.get_center(),i=new o(this.xSize,this.ySize,null,this.rules,"cutoff"),a=0;a<e;a++)for(var s=new r(0,a),l=0;l<2*Math.PI;l+=1/(2*Math.PI)){var u=t.xPos-Math.round(s.xPos*Math.cos(l)+-1*s.yPos*Math.sin(l)),c=t.yPos+Math.round(s.xPos*Math.sin(l)+s.yPos*Math.cos(l));i.gameField[u][c]=new n(!0)}return console.log(i.gameField[300][217]),i},e.prototype.yline=function(e){for(var t=this.get_center(),r=new o(this.xSize,this.ySize,null,this.rules,"cutoff"),i=0;i<e;i++)r.gameField[t.xPos][t.yPos+i]=new n(!0),console.log("Creating line at"+t.xPos+" "+t.yPos+"length: "+i);return r},e.prototype.get_center=function(){var e=Math.ceil(this.xSize/2),t=Math.ceil(this.ySize/2);return new r(e,t)},e.prototype.randomize_cells=function(){for(var e=new o(this.xSize,this.ySize,null,this.rules,"cutoff"),t=0;t<this.xSize;t++)for(var r=0;r<this.ySize;r++)Math.round(10*Math.random())>=3&&(e.gameField[t][r]=new n(!0));return e},e}();t.ConwayGameFactory=a;var s=function(){function e(e,t,n,r){this.r=e,this.g=t,this.b=n,this.a=r}return Object.defineProperty(e.prototype,"data",{get:function(){return[this.r,this.g,this.b,this.a]},enumerable:!1,configurable:!0}),e}(),l=function(){function e(e){this.default_cell_alive_repr="ðŸŸ©",this.default_cell_dead_repr="â¬œ",this.conway_game=e,this.cell_repr_alive=new s(255,255,255,255),this.cell_repr_dead=new s(0,0,20,255),this.cell_repr_transparent=new s(0,0,0,0)}return e.prototype.representation=function(e){return e.is_alive?this.default_cell_alive_repr:this.default_cell_dead_repr},e.prototype.str_field=function(){for(var e="",t=0;t<this.conway_game.xSize;t++){for(var n=0;n<this.conway_game.ySize;n++){var r=this.conway_game.gameField[t][n];e+=this.representation(r)}e+="\n"}return e},e.prototype.as_number_colors_arr=function(){for(var e=[],t=0;t<this.conway_game.xSize;t++)for(var n=0;n<this.conway_game.ySize;n++)this.conway_game.gameField[t][n].is_alive?e[t+this.conway_game.ySize*n]=this.cell_repr_alive:e[t+this.conway_game.ySize*n]=this.cell_repr_dead;return e},e}(),u=function(){function e(e,t){this.xStyleCanvas=e,this.yStyleCanvas=t}return e.prototype.updateEmojiGameFieldAsString=function(e){var t=document.getElementById("gameField");if(null!=t){var n=new l(e);t.innerHTML=n.str_field()}},e.prototype.updategameFieldPixelsAsCanvas=function(e){var t=new l(e),n=document.getElementById("gameField");if(null!=n){n.style.width="500px",n.style.height="500px";var r=document.createElement("canvas");r.style.width="500px",r.style.height="500px";var i=r.getContext("2d"),o=e.xSize,a=e.ySize,s=null==i?void 0:i.createImageData(o,a);if(console.log("Created with size:"+o+","+a),s){var u=t.as_number_colors_arr();console.log("length of arr"+u.length);for(var c=0,h=0;h<s.data.length;h+=4){var y=u[c].data;s.data[h+0]=y[0],s.data[h+1]=y[1],s.data[h+2]=y[2],s.data[h+3]=y[3],c+=1}null==i||i.putImageData(s,0,0),i&&(i.imageSmoothingEnabled=!1),n.replaceChildren(r)}}else console.error("couldn't find the gameField")},e.prototype.displayGeneration=function(e){var t=document.getElementById("GameFieldCurrentGeneration");if(null!=t){var n=document.createElement("h1");n.innerHTML="current Generation: "+e.toString(),t.childNodes.forEach((function(e){e.remove()})),t.appendChild(n)}},e}();t.ConwayHTMLDisplayer=u;var c=new Array(new r(-1,-1),new r(-1,0),new r(-1,1),new r(0,1),new r(0,-1),new r(1,1),new r(1,0),new r(1,-1)),h=new Array(new i(!0,c,[2,3],[3]));t.DEFAULTGAMERULE=h,new Array(new i(!0,c,[2],[2])),new Array(new i(!0,c,[1,3,5,7],[1,3,5,7])),new Array(new i(!0,c,[3],[3])),new Array(new i(!0,c,[2,3,6],[3])),new Array(new i(!0,c,[2],[2])),new Array(new i(!0,c,[3],[2]))},156:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(923);function a(e){return new Promise((function(t){return setTimeout(t,e)}))}!function(){r(this,void 0,void 0,(function(){var e,t,n,r;return i(this,(function(i){switch(i.label){case 0:return e=new o.ConwayGameFactory(500,500,o.DEFAULTGAMERULE),null==(t=e.circle(100))?[2]:((n=new o.ConwayHTMLDisplayer("100%","100%")).updategameFieldPixelsAsCanvas(t),n.displayGeneration(-1),[4,a(1e4)]);case 1:i.sent(),r=0,i.label=2;case 2:return r<2e3?(n.displayGeneration(r),t=t.next_conway_state(),n.updategameFieldPixelsAsCanvas(t),console.log("next generation"+r),[4,a(200)]):[3,5];case 3:i.sent(),i.label=4;case 4:return r++,[3,2];case 5:return[2]}}))}))}()}},t={};!function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}(156)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,